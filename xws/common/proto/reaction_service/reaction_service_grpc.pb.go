// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReactionServiceClient is the client API for ReactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReactionServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Reaction(ctx context.Context, in *ReactionRequest, opts ...grpc.CallOption) (*ReactionResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeletePostReactions(ctx context.Context, in *DeletePostReactionsRequest, opts ...grpc.CallOption) (*DeletePostReactionsResponse, error)
}

type reactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReactionServiceClient(cc grpc.ClientConnInterface) ReactionServiceClient {
	return &reactionServiceClient{cc}
}

func (c *reactionServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/reaction.ReactionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionServiceClient) Reaction(ctx context.Context, in *ReactionRequest, opts ...grpc.CallOption) (*ReactionResponse, error) {
	out := new(ReactionResponse)
	err := c.cc.Invoke(ctx, "/reaction.ReactionService/Reaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/reaction.ReactionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionServiceClient) DeletePostReactions(ctx context.Context, in *DeletePostReactionsRequest, opts ...grpc.CallOption) (*DeletePostReactionsResponse, error) {
	out := new(DeletePostReactionsResponse)
	err := c.cc.Invoke(ctx, "/reaction.ReactionService/DeletePostReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReactionServiceServer is the server API for ReactionService service.
// All implementations must embed UnimplementedReactionServiceServer
// for forward compatibility
type ReactionServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Reaction(context.Context, *ReactionRequest) (*ReactionResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	DeletePostReactions(context.Context, *DeletePostReactionsRequest) (*DeletePostReactionsResponse, error)
	mustEmbedUnimplementedReactionServiceServer()
}

// UnimplementedReactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReactionServiceServer struct {
}

func (*UnimplementedReactionServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedReactionServiceServer) Reaction(context.Context, *ReactionRequest) (*ReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reaction not implemented")
}
func (*UnimplementedReactionServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedReactionServiceServer) DeletePostReactions(context.Context, *DeletePostReactionsRequest) (*DeletePostReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostReactions not implemented")
}
func (*UnimplementedReactionServiceServer) mustEmbedUnimplementedReactionServiceServer() {}

func RegisterReactionServiceServer(s *grpc.Server, srv ReactionServiceServer) {
	s.RegisterService(&_ReactionService_serviceDesc, srv)
}

func _ReactionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reaction.ReactionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReactionService_Reaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionServiceServer).Reaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reaction.ReactionService/Reaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionServiceServer).Reaction(ctx, req.(*ReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReactionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reaction.ReactionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReactionService_DeletePostReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionServiceServer).DeletePostReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reaction.ReactionService/DeletePostReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionServiceServer).DeletePostReactions(ctx, req.(*DeletePostReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reaction.ReactionService",
	HandlerType: (*ReactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ReactionService_Get_Handler,
		},
		{
			MethodName: "Reaction",
			Handler:    _ReactionService_Reaction_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReactionService_Delete_Handler,
		},
		{
			MethodName: "DeletePostReactions",
			Handler:    _ReactionService_DeletePostReactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reaction_service/reaction_service.proto",
}
