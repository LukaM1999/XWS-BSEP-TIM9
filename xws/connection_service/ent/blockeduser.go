// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dislinkt/connection_service/ent/blockeduser"
	"dislinkt/connection_service/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// BlockedUser is the model entity for the BlockedUser schema.
type BlockedUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IssuerPrimaryKey holds the value of the "issuer_primary_key" field.
	IssuerPrimaryKey string `json:"issuer_primary_key,omitempty"`
	// SubjectPrimaryKey holds the value of the "subject_primary_key" field.
	SubjectPrimaryKey string `json:"subject_primary_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockedUserQuery when eager-loading is set.
	Edges      BlockedUserEdges `json:"edges"`
	user_block *int
}

// BlockedUserEdges holds the relations/edges for other nodes in the graph.
type BlockedUserEdges struct {
	// BlockedBy holds the value of the blocked_by edge.
	BlockedBy *User `json:"blocked_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockedByOrErr returns the BlockedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockedUserEdges) BlockedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.BlockedBy == nil {
			// The edge blocked_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.BlockedBy, nil
	}
	return nil, &NotLoadedError{edge: "blocked_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockedUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockeduser.FieldID:
			values[i] = new(sql.NullInt64)
		case blockeduser.FieldIssuerPrimaryKey, blockeduser.FieldSubjectPrimaryKey:
			values[i] = new(sql.NullString)
		case blockeduser.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case blockeduser.ForeignKeys[0]: // user_block
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BlockedUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockedUser fields.
func (bu *BlockedUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockeduser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bu.ID = int(value.Int64)
		case blockeduser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bu.CreatedAt = value.Time
			}
		case blockeduser.FieldIssuerPrimaryKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer_primary_key", values[i])
			} else if value.Valid {
				bu.IssuerPrimaryKey = value.String
			}
		case blockeduser.FieldSubjectPrimaryKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_primary_key", values[i])
			} else if value.Valid {
				bu.SubjectPrimaryKey = value.String
			}
		case blockeduser.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_block", value)
			} else if value.Valid {
				bu.user_block = new(int)
				*bu.user_block = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBlockedBy queries the "blocked_by" edge of the BlockedUser entity.
func (bu *BlockedUser) QueryBlockedBy() *UserQuery {
	return (&BlockedUserClient{config: bu.config}).QueryBlockedBy(bu)
}

// Update returns a builder for updating this BlockedUser.
// Note that you need to call BlockedUser.Unwrap() before calling this method if this BlockedUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (bu *BlockedUser) Update() *BlockedUserUpdateOne {
	return (&BlockedUserClient{config: bu.config}).UpdateOne(bu)
}

// Unwrap unwraps the BlockedUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bu *BlockedUser) Unwrap() *BlockedUser {
	_tx, ok := bu.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockedUser is not a transactional entity")
	}
	bu.config.driver = _tx.drv
	return bu
}

// String implements the fmt.Stringer.
func (bu *BlockedUser) String() string {
	var builder strings.Builder
	builder.WriteString("BlockedUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("issuer_primary_key=")
	builder.WriteString(bu.IssuerPrimaryKey)
	builder.WriteString(", ")
	builder.WriteString("subject_primary_key=")
	builder.WriteString(bu.SubjectPrimaryKey)
	builder.WriteByte(')')
	return builder.String()
}

// BlockedUsers is a parsable slice of BlockedUser.
type BlockedUsers []*BlockedUser

func (bu BlockedUsers) config(cfg config) {
	for _i := range bu {
		bu[_i].config = cfg
	}
}
