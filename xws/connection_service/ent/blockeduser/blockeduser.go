// Code generated by ent, DO NOT EDIT.

package blockeduser

import (
	"time"
)

const (
	// Label holds the string label denoting the blockeduser type in the database.
	Label = "blocked_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIssuerPrimaryKey holds the string denoting the issuer_primary_key field in the database.
	FieldIssuerPrimaryKey = "issuer_primary_key"
	// FieldSubjectPrimaryKey holds the string denoting the subject_primary_key field in the database.
	FieldSubjectPrimaryKey = "subject_primary_key"
	// EdgeBlockedBy holds the string denoting the blocked_by edge name in mutations.
	EdgeBlockedBy = "blocked_by"
	// Table holds the table name of the blockeduser in the database.
	Table = "blocked_users"
	// BlockedByTable is the table that holds the blocked_by relation/edge.
	BlockedByTable = "blocked_users"
	// BlockedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BlockedByInverseTable = "users"
	// BlockedByColumn is the table column denoting the blocked_by relation/edge.
	BlockedByColumn = "user_block"
)

// Columns holds all SQL columns for blockeduser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldIssuerPrimaryKey,
	FieldSubjectPrimaryKey,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "blocked_users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_block",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
