// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dislinkt/connection_service/ent/blockeduser"
	"dislinkt/connection_service/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockedUserCreate is the builder for creating a BlockedUser entity.
type BlockedUserCreate struct {
	config
	mutation *BlockedUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (buc *BlockedUserCreate) SetCreatedAt(t time.Time) *BlockedUserCreate {
	buc.mutation.SetCreatedAt(t)
	return buc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buc *BlockedUserCreate) SetNillableCreatedAt(t *time.Time) *BlockedUserCreate {
	if t != nil {
		buc.SetCreatedAt(*t)
	}
	return buc
}

// SetIssuerPrimaryKey sets the "issuer_primary_key" field.
func (buc *BlockedUserCreate) SetIssuerPrimaryKey(s string) *BlockedUserCreate {
	buc.mutation.SetIssuerPrimaryKey(s)
	return buc
}

// SetSubjectPrimaryKey sets the "subject_primary_key" field.
func (buc *BlockedUserCreate) SetSubjectPrimaryKey(s string) *BlockedUserCreate {
	buc.mutation.SetSubjectPrimaryKey(s)
	return buc
}

// SetBlockedByID sets the "blocked_by" edge to the User entity by ID.
func (buc *BlockedUserCreate) SetBlockedByID(id int) *BlockedUserCreate {
	buc.mutation.SetBlockedByID(id)
	return buc
}

// SetBlockedBy sets the "blocked_by" edge to the User entity.
func (buc *BlockedUserCreate) SetBlockedBy(u *User) *BlockedUserCreate {
	return buc.SetBlockedByID(u.ID)
}

// Mutation returns the BlockedUserMutation object of the builder.
func (buc *BlockedUserCreate) Mutation() *BlockedUserMutation {
	return buc.mutation
}

// Save creates the BlockedUser in the database.
func (buc *BlockedUserCreate) Save(ctx context.Context) (*BlockedUser, error) {
	var (
		err  error
		node *BlockedUser
	)
	buc.defaults()
	if len(buc.hooks) == 0 {
		if err = buc.check(); err != nil {
			return nil, err
		}
		node, err = buc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockedUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buc.check(); err != nil {
				return nil, err
			}
			buc.mutation = mutation
			if node, err = buc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(buc.hooks) - 1; i >= 0; i-- {
			if buc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BlockedUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockedUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (buc *BlockedUserCreate) SaveX(ctx context.Context) *BlockedUser {
	v, err := buc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (buc *BlockedUserCreate) Exec(ctx context.Context) error {
	_, err := buc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buc *BlockedUserCreate) ExecX(ctx context.Context) {
	if err := buc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buc *BlockedUserCreate) defaults() {
	if _, ok := buc.mutation.CreatedAt(); !ok {
		v := blockeduser.DefaultCreatedAt()
		buc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buc *BlockedUserCreate) check() error {
	if _, ok := buc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockedUser.created_at"`)}
	}
	if _, ok := buc.mutation.IssuerPrimaryKey(); !ok {
		return &ValidationError{Name: "issuer_primary_key", err: errors.New(`ent: missing required field "BlockedUser.issuer_primary_key"`)}
	}
	if _, ok := buc.mutation.SubjectPrimaryKey(); !ok {
		return &ValidationError{Name: "subject_primary_key", err: errors.New(`ent: missing required field "BlockedUser.subject_primary_key"`)}
	}
	if _, ok := buc.mutation.BlockedByID(); !ok {
		return &ValidationError{Name: "blocked_by", err: errors.New(`ent: missing required edge "BlockedUser.blocked_by"`)}
	}
	return nil
}

func (buc *BlockedUserCreate) sqlSave(ctx context.Context) (*BlockedUser, error) {
	_node, _spec := buc.createSpec()
	if err := sqlgraph.CreateNode(ctx, buc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (buc *BlockedUserCreate) createSpec() (*BlockedUser, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockedUser{config: buc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blockeduser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockeduser.FieldID,
			},
		}
	)
	if value, ok := buc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockeduser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := buc.mutation.IssuerPrimaryKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockeduser.FieldIssuerPrimaryKey,
		})
		_node.IssuerPrimaryKey = value
	}
	if value, ok := buc.mutation.SubjectPrimaryKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockeduser.FieldSubjectPrimaryKey,
		})
		_node.SubjectPrimaryKey = value
	}
	if nodes := buc.mutation.BlockedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockeduser.BlockedByTable,
			Columns: []string{blockeduser.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_block = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlockedUserCreateBulk is the builder for creating many BlockedUser entities in bulk.
type BlockedUserCreateBulk struct {
	config
	builders []*BlockedUserCreate
}

// Save creates the BlockedUser entities in the database.
func (bucb *BlockedUserCreateBulk) Save(ctx context.Context) ([]*BlockedUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bucb.builders))
	nodes := make([]*BlockedUser, len(bucb.builders))
	mutators := make([]Mutator, len(bucb.builders))
	for i := range bucb.builders {
		func(i int, root context.Context) {
			builder := bucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockedUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bucb *BlockedUserCreateBulk) SaveX(ctx context.Context) []*BlockedUser {
	v, err := bucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bucb *BlockedUserCreateBulk) Exec(ctx context.Context) error {
	_, err := bucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bucb *BlockedUserCreateBulk) ExecX(ctx context.Context) {
	if err := bucb.Exec(ctx); err != nil {
		panic(err)
	}
}
