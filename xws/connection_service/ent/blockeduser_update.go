// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dislinkt/connection_service/ent/blockeduser"
	"dislinkt/connection_service/ent/predicate"
	"dislinkt/connection_service/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockedUserUpdate is the builder for updating BlockedUser entities.
type BlockedUserUpdate struct {
	config
	hooks    []Hook
	mutation *BlockedUserMutation
}

// Where appends a list predicates to the BlockedUserUpdate builder.
func (buu *BlockedUserUpdate) Where(ps ...predicate.BlockedUser) *BlockedUserUpdate {
	buu.mutation.Where(ps...)
	return buu
}

// SetCreatedAt sets the "created_at" field.
func (buu *BlockedUserUpdate) SetCreatedAt(t time.Time) *BlockedUserUpdate {
	buu.mutation.SetCreatedAt(t)
	return buu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buu *BlockedUserUpdate) SetNillableCreatedAt(t *time.Time) *BlockedUserUpdate {
	if t != nil {
		buu.SetCreatedAt(*t)
	}
	return buu
}

// SetIssuerPrimaryKey sets the "issuer_primary_key" field.
func (buu *BlockedUserUpdate) SetIssuerPrimaryKey(s string) *BlockedUserUpdate {
	buu.mutation.SetIssuerPrimaryKey(s)
	return buu
}

// SetSubjectPrimaryKey sets the "subject_primary_key" field.
func (buu *BlockedUserUpdate) SetSubjectPrimaryKey(s string) *BlockedUserUpdate {
	buu.mutation.SetSubjectPrimaryKey(s)
	return buu
}

// SetBlockedByID sets the "blocked_by" edge to the User entity by ID.
func (buu *BlockedUserUpdate) SetBlockedByID(id int) *BlockedUserUpdate {
	buu.mutation.SetBlockedByID(id)
	return buu
}

// SetBlockedBy sets the "blocked_by" edge to the User entity.
func (buu *BlockedUserUpdate) SetBlockedBy(u *User) *BlockedUserUpdate {
	return buu.SetBlockedByID(u.ID)
}

// Mutation returns the BlockedUserMutation object of the builder.
func (buu *BlockedUserUpdate) Mutation() *BlockedUserMutation {
	return buu.mutation
}

// ClearBlockedBy clears the "blocked_by" edge to the User entity.
func (buu *BlockedUserUpdate) ClearBlockedBy() *BlockedUserUpdate {
	buu.mutation.ClearBlockedBy()
	return buu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (buu *BlockedUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(buu.hooks) == 0 {
		if err = buu.check(); err != nil {
			return 0, err
		}
		affected, err = buu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockedUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buu.check(); err != nil {
				return 0, err
			}
			buu.mutation = mutation
			affected, err = buu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(buu.hooks) - 1; i >= 0; i-- {
			if buu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (buu *BlockedUserUpdate) SaveX(ctx context.Context) int {
	affected, err := buu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (buu *BlockedUserUpdate) Exec(ctx context.Context) error {
	_, err := buu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buu *BlockedUserUpdate) ExecX(ctx context.Context) {
	if err := buu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buu *BlockedUserUpdate) check() error {
	if _, ok := buu.mutation.BlockedByID(); buu.mutation.BlockedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockedUser.blocked_by"`)
	}
	return nil
}

func (buu *BlockedUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockeduser.Table,
			Columns: blockeduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockeduser.FieldID,
			},
		},
	}
	if ps := buu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockeduser.FieldCreatedAt,
		})
	}
	if value, ok := buu.mutation.IssuerPrimaryKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockeduser.FieldIssuerPrimaryKey,
		})
	}
	if value, ok := buu.mutation.SubjectPrimaryKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockeduser.FieldSubjectPrimaryKey,
		})
	}
	if buu.mutation.BlockedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockeduser.BlockedByTable,
			Columns: []string{blockeduser.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buu.mutation.BlockedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockeduser.BlockedByTable,
			Columns: []string{blockeduser.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, buu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockeduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BlockedUserUpdateOne is the builder for updating a single BlockedUser entity.
type BlockedUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockedUserMutation
}

// SetCreatedAt sets the "created_at" field.
func (buuo *BlockedUserUpdateOne) SetCreatedAt(t time.Time) *BlockedUserUpdateOne {
	buuo.mutation.SetCreatedAt(t)
	return buuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buuo *BlockedUserUpdateOne) SetNillableCreatedAt(t *time.Time) *BlockedUserUpdateOne {
	if t != nil {
		buuo.SetCreatedAt(*t)
	}
	return buuo
}

// SetIssuerPrimaryKey sets the "issuer_primary_key" field.
func (buuo *BlockedUserUpdateOne) SetIssuerPrimaryKey(s string) *BlockedUserUpdateOne {
	buuo.mutation.SetIssuerPrimaryKey(s)
	return buuo
}

// SetSubjectPrimaryKey sets the "subject_primary_key" field.
func (buuo *BlockedUserUpdateOne) SetSubjectPrimaryKey(s string) *BlockedUserUpdateOne {
	buuo.mutation.SetSubjectPrimaryKey(s)
	return buuo
}

// SetBlockedByID sets the "blocked_by" edge to the User entity by ID.
func (buuo *BlockedUserUpdateOne) SetBlockedByID(id int) *BlockedUserUpdateOne {
	buuo.mutation.SetBlockedByID(id)
	return buuo
}

// SetBlockedBy sets the "blocked_by" edge to the User entity.
func (buuo *BlockedUserUpdateOne) SetBlockedBy(u *User) *BlockedUserUpdateOne {
	return buuo.SetBlockedByID(u.ID)
}

// Mutation returns the BlockedUserMutation object of the builder.
func (buuo *BlockedUserUpdateOne) Mutation() *BlockedUserMutation {
	return buuo.mutation
}

// ClearBlockedBy clears the "blocked_by" edge to the User entity.
func (buuo *BlockedUserUpdateOne) ClearBlockedBy() *BlockedUserUpdateOne {
	buuo.mutation.ClearBlockedBy()
	return buuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buuo *BlockedUserUpdateOne) Select(field string, fields ...string) *BlockedUserUpdateOne {
	buuo.fields = append([]string{field}, fields...)
	return buuo
}

// Save executes the query and returns the updated BlockedUser entity.
func (buuo *BlockedUserUpdateOne) Save(ctx context.Context) (*BlockedUser, error) {
	var (
		err  error
		node *BlockedUser
	)
	if len(buuo.hooks) == 0 {
		if err = buuo.check(); err != nil {
			return nil, err
		}
		node, err = buuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockedUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buuo.check(); err != nil {
				return nil, err
			}
			buuo.mutation = mutation
			node, err = buuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buuo.hooks) - 1; i >= 0; i-- {
			if buuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BlockedUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockedUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buuo *BlockedUserUpdateOne) SaveX(ctx context.Context) *BlockedUser {
	node, err := buuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buuo *BlockedUserUpdateOne) Exec(ctx context.Context) error {
	_, err := buuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buuo *BlockedUserUpdateOne) ExecX(ctx context.Context) {
	if err := buuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buuo *BlockedUserUpdateOne) check() error {
	if _, ok := buuo.mutation.BlockedByID(); buuo.mutation.BlockedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockedUser.blocked_by"`)
	}
	return nil
}

func (buuo *BlockedUserUpdateOne) sqlSave(ctx context.Context) (_node *BlockedUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockeduser.Table,
			Columns: blockeduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockeduser.FieldID,
			},
		},
	}
	id, ok := buuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockedUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockeduser.FieldID)
		for _, f := range fields {
			if !blockeduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockeduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockeduser.FieldCreatedAt,
		})
	}
	if value, ok := buuo.mutation.IssuerPrimaryKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockeduser.FieldIssuerPrimaryKey,
		})
	}
	if value, ok := buuo.mutation.SubjectPrimaryKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockeduser.FieldSubjectPrimaryKey,
		})
	}
	if buuo.mutation.BlockedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockeduser.BlockedByTable,
			Columns: []string{blockeduser.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buuo.mutation.BlockedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockeduser.BlockedByTable,
			Columns: []string{blockeduser.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockedUser{config: buuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockeduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
