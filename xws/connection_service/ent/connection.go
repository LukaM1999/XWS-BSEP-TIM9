// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dislinkt/connection_service/ent/connection"
	"dislinkt/connection_service/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Connection is the model entity for the Connection schema.
type Connection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ConnectionID holds the value of the "connection_id" field.
	ConnectionID int `json:"connection_id,omitempty"`
	// IssuerPrimaryKey holds the value of the "issuer_primary_key" field.
	IssuerPrimaryKey string `json:"issuer_primary_key,omitempty"`
	// SubjectPrimaryKey holds the value of the "subject_primary_key" field.
	SubjectPrimaryKey string `json:"subject_primary_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionQuery when eager-loading is set.
	Edges ConnectionEdges `json:"edges"`
}

// ConnectionEdges holds the relations/edges for other nodes in the graph.
type ConnectionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Connection holds the value of the connection edge.
	Connection *User `json:"connection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionEdges) ConnectionOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Connection == nil {
			// The edge connection was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Connection, nil
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Connection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case connection.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case connection.FieldID, connection.FieldUserID, connection.FieldConnectionID:
			values[i] = new(sql.NullInt64)
		case connection.FieldIssuerPrimaryKey, connection.FieldSubjectPrimaryKey:
			values[i] = new(sql.NullString)
		case connection.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Connection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Connection fields.
func (c *Connection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case connection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case connection.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				c.IsApproved = value.Bool
			}
		case connection.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case connection.FieldConnectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field connection_id", values[i])
			} else if value.Valid {
				c.ConnectionID = int(value.Int64)
			}
		case connection.FieldIssuerPrimaryKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer_primary_key", values[i])
			} else if value.Valid {
				c.IssuerPrimaryKey = value.String
			}
		case connection.FieldSubjectPrimaryKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_primary_key", values[i])
			} else if value.Valid {
				c.SubjectPrimaryKey = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Connection entity.
func (c *Connection) QueryUser() *UserQuery {
	return (&ConnectionClient{config: c.config}).QueryUser(c)
}

// QueryConnection queries the "connection" edge of the Connection entity.
func (c *Connection) QueryConnection() *UserQuery {
	return (&ConnectionClient{config: c.config}).QueryConnection(c)
}

// Update returns a builder for updating this Connection.
// Note that you need to call Connection.Unwrap() before calling this method if this Connection
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Connection) Update() *ConnectionUpdateOne {
	return (&ConnectionClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Connection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Connection) Unwrap() *Connection {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Connection is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Connection) String() string {
	var builder strings.Builder
	builder.WriteString("Connection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", c.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("connection_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ConnectionID))
	builder.WriteString(", ")
	builder.WriteString("issuer_primary_key=")
	builder.WriteString(c.IssuerPrimaryKey)
	builder.WriteString(", ")
	builder.WriteString("subject_primary_key=")
	builder.WriteString(c.SubjectPrimaryKey)
	builder.WriteByte(')')
	return builder.String()
}

// Connections is a parsable slice of Connection.
type Connections []*Connection

func (c Connections) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
