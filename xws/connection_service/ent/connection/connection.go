// Code generated by ent, DO NOT EDIT.

package connection

import (
	"time"
)

const (
	// Label holds the string label denoting the connection type in the database.
	Label = "connection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldConnectionID holds the string denoting the connection_id field in the database.
	FieldConnectionID = "connection_id"
	// FieldIssuerPrimaryKey holds the string denoting the issuer_primary_key field in the database.
	FieldIssuerPrimaryKey = "issuer_primary_key"
	// FieldSubjectPrimaryKey holds the string denoting the subject_primary_key field in the database.
	FieldSubjectPrimaryKey = "subject_primary_key"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// Table holds the table name of the connection in the database.
	Table = "connections"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "connections"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "connections"
	// ConnectionInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ConnectionInverseTable = "users"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "connection_id"
)

// Columns holds all SQL columns for connection fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldIsApproved,
	FieldUserID,
	FieldConnectionID,
	FieldIssuerPrimaryKey,
	FieldSubjectPrimaryKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsApproved holds the default value on creation for the "is_approved" field.
	DefaultIsApproved bool
)
