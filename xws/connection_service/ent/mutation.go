// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dislinkt/connection_service/ent/blockeduser"
	"dislinkt/connection_service/ent/connection"
	"dislinkt/connection_service/ent/predicate"
	"dislinkt/connection_service/ent/user"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlockedUser = "BlockedUser"
	TypeConnection  = "Connection"
	TypeUser        = "User"
)

// BlockedUserMutation represents an operation that mutates the BlockedUser nodes in the graph.
type BlockedUserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	issuer_primary_key  *string
	subject_primary_key *string
	clearedFields       map[string]struct{}
	blocked_by          *int
	clearedblocked_by   bool
	done                bool
	oldValue            func(context.Context) (*BlockedUser, error)
	predicates          []predicate.BlockedUser
}

var _ ent.Mutation = (*BlockedUserMutation)(nil)

// blockeduserOption allows management of the mutation configuration using functional options.
type blockeduserOption func(*BlockedUserMutation)

// newBlockedUserMutation creates new mutation for the BlockedUser entity.
func newBlockedUserMutation(c config, op Op, opts ...blockeduserOption) *BlockedUserMutation {
	m := &BlockedUserMutation{
		config:        c,
		op:            op,
		typ:           TypeBlockedUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlockedUserID sets the ID field of the mutation.
func withBlockedUserID(id int) blockeduserOption {
	return func(m *BlockedUserMutation) {
		var (
			err   error
			once  sync.Once
			value *BlockedUser
		)
		m.oldValue = func(ctx context.Context) (*BlockedUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BlockedUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlockedUser sets the old BlockedUser of the mutation.
func withBlockedUser(node *BlockedUser) blockeduserOption {
	return func(m *BlockedUserMutation) {
		m.oldValue = func(context.Context) (*BlockedUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlockedUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlockedUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlockedUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlockedUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BlockedUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BlockedUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BlockedUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BlockedUser entity.
// If the BlockedUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockedUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BlockedUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetIssuerPrimaryKey sets the "issuer_primary_key" field.
func (m *BlockedUserMutation) SetIssuerPrimaryKey(s string) {
	m.issuer_primary_key = &s
}

// IssuerPrimaryKey returns the value of the "issuer_primary_key" field in the mutation.
func (m *BlockedUserMutation) IssuerPrimaryKey() (r string, exists bool) {
	v := m.issuer_primary_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIssuerPrimaryKey returns the old "issuer_primary_key" field's value of the BlockedUser entity.
// If the BlockedUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockedUserMutation) OldIssuerPrimaryKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIssuerPrimaryKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIssuerPrimaryKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIssuerPrimaryKey: %w", err)
	}
	return oldValue.IssuerPrimaryKey, nil
}

// ResetIssuerPrimaryKey resets all changes to the "issuer_primary_key" field.
func (m *BlockedUserMutation) ResetIssuerPrimaryKey() {
	m.issuer_primary_key = nil
}

// SetSubjectPrimaryKey sets the "subject_primary_key" field.
func (m *BlockedUserMutation) SetSubjectPrimaryKey(s string) {
	m.subject_primary_key = &s
}

// SubjectPrimaryKey returns the value of the "subject_primary_key" field in the mutation.
func (m *BlockedUserMutation) SubjectPrimaryKey() (r string, exists bool) {
	v := m.subject_primary_key
	if v == nil {
		return
	}
	return *v, true
}

// OldSubjectPrimaryKey returns the old "subject_primary_key" field's value of the BlockedUser entity.
// If the BlockedUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockedUserMutation) OldSubjectPrimaryKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubjectPrimaryKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubjectPrimaryKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubjectPrimaryKey: %w", err)
	}
	return oldValue.SubjectPrimaryKey, nil
}

// ResetSubjectPrimaryKey resets all changes to the "subject_primary_key" field.
func (m *BlockedUserMutation) ResetSubjectPrimaryKey() {
	m.subject_primary_key = nil
}

// SetBlockedByID sets the "blocked_by" edge to the User entity by id.
func (m *BlockedUserMutation) SetBlockedByID(id int) {
	m.blocked_by = &id
}

// ClearBlockedBy clears the "blocked_by" edge to the User entity.
func (m *BlockedUserMutation) ClearBlockedBy() {
	m.clearedblocked_by = true
}

// BlockedByCleared reports if the "blocked_by" edge to the User entity was cleared.
func (m *BlockedUserMutation) BlockedByCleared() bool {
	return m.clearedblocked_by
}

// BlockedByID returns the "blocked_by" edge ID in the mutation.
func (m *BlockedUserMutation) BlockedByID() (id int, exists bool) {
	if m.blocked_by != nil {
		return *m.blocked_by, true
	}
	return
}

// BlockedByIDs returns the "blocked_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlockedByID instead. It exists only for internal usage by the builders.
func (m *BlockedUserMutation) BlockedByIDs() (ids []int) {
	if id := m.blocked_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlockedBy resets all changes to the "blocked_by" edge.
func (m *BlockedUserMutation) ResetBlockedBy() {
	m.blocked_by = nil
	m.clearedblocked_by = false
}

// Where appends a list predicates to the BlockedUserMutation builder.
func (m *BlockedUserMutation) Where(ps ...predicate.BlockedUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BlockedUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BlockedUser).
func (m *BlockedUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlockedUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, blockeduser.FieldCreatedAt)
	}
	if m.issuer_primary_key != nil {
		fields = append(fields, blockeduser.FieldIssuerPrimaryKey)
	}
	if m.subject_primary_key != nil {
		fields = append(fields, blockeduser.FieldSubjectPrimaryKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlockedUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blockeduser.FieldCreatedAt:
		return m.CreatedAt()
	case blockeduser.FieldIssuerPrimaryKey:
		return m.IssuerPrimaryKey()
	case blockeduser.FieldSubjectPrimaryKey:
		return m.SubjectPrimaryKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlockedUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blockeduser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case blockeduser.FieldIssuerPrimaryKey:
		return m.OldIssuerPrimaryKey(ctx)
	case blockeduser.FieldSubjectPrimaryKey:
		return m.OldSubjectPrimaryKey(ctx)
	}
	return nil, fmt.Errorf("unknown BlockedUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockedUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blockeduser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case blockeduser.FieldIssuerPrimaryKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIssuerPrimaryKey(v)
		return nil
	case blockeduser.FieldSubjectPrimaryKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubjectPrimaryKey(v)
		return nil
	}
	return fmt.Errorf("unknown BlockedUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlockedUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlockedUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockedUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BlockedUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlockedUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlockedUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlockedUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BlockedUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlockedUserMutation) ResetField(name string) error {
	switch name {
	case blockeduser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case blockeduser.FieldIssuerPrimaryKey:
		m.ResetIssuerPrimaryKey()
		return nil
	case blockeduser.FieldSubjectPrimaryKey:
		m.ResetSubjectPrimaryKey()
		return nil
	}
	return fmt.Errorf("unknown BlockedUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlockedUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.blocked_by != nil {
		edges = append(edges, blockeduser.EdgeBlockedBy)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlockedUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case blockeduser.EdgeBlockedBy:
		if id := m.blocked_by; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlockedUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlockedUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlockedUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedblocked_by {
		edges = append(edges, blockeduser.EdgeBlockedBy)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlockedUserMutation) EdgeCleared(name string) bool {
	switch name {
	case blockeduser.EdgeBlockedBy:
		return m.clearedblocked_by
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlockedUserMutation) ClearEdge(name string) error {
	switch name {
	case blockeduser.EdgeBlockedBy:
		m.ClearBlockedBy()
		return nil
	}
	return fmt.Errorf("unknown BlockedUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlockedUserMutation) ResetEdge(name string) error {
	switch name {
	case blockeduser.EdgeBlockedBy:
		m.ResetBlockedBy()
		return nil
	}
	return fmt.Errorf("unknown BlockedUser edge %s", name)
}

// ConnectionMutation represents an operation that mutates the Connection nodes in the graph.
type ConnectionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	is_approved         *bool
	issuer_primary_key  *string
	subject_primary_key *string
	clearedFields       map[string]struct{}
	user                *int
	cleareduser         bool
	connection          *int
	clearedconnection   bool
	done                bool
	oldValue            func(context.Context) (*Connection, error)
	predicates          []predicate.Connection
}

var _ ent.Mutation = (*ConnectionMutation)(nil)

// connectionOption allows management of the mutation configuration using functional options.
type connectionOption func(*ConnectionMutation)

// newConnectionMutation creates new mutation for the Connection entity.
func newConnectionMutation(c config, op Op, opts ...connectionOption) *ConnectionMutation {
	m := &ConnectionMutation{
		config:        c,
		op:            op,
		typ:           TypeConnection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConnectionID sets the ID field of the mutation.
func withConnectionID(id int) connectionOption {
	return func(m *ConnectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Connection
		)
		m.oldValue = func(ctx context.Context) (*Connection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Connection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConnection sets the old Connection of the mutation.
func withConnection(node *Connection) connectionOption {
	return func(m *ConnectionMutation) {
		m.oldValue = func(context.Context) (*Connection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConnectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConnectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConnectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConnectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Connection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ConnectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ConnectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Connection entity.
// If the Connection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ConnectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetIsApproved sets the "is_approved" field.
func (m *ConnectionMutation) SetIsApproved(b bool) {
	m.is_approved = &b
}

// IsApproved returns the value of the "is_approved" field in the mutation.
func (m *ConnectionMutation) IsApproved() (r bool, exists bool) {
	v := m.is_approved
	if v == nil {
		return
	}
	return *v, true
}

// OldIsApproved returns the old "is_approved" field's value of the Connection entity.
// If the Connection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectionMutation) OldIsApproved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsApproved: %w", err)
	}
	return oldValue.IsApproved, nil
}

// ResetIsApproved resets all changes to the "is_approved" field.
func (m *ConnectionMutation) ResetIsApproved() {
	m.is_approved = nil
}

// SetUserID sets the "user_id" field.
func (m *ConnectionMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ConnectionMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Connection entity.
// If the Connection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectionMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ConnectionMutation) ResetUserID() {
	m.user = nil
}

// SetConnectionID sets the "connection_id" field.
func (m *ConnectionMutation) SetConnectionID(i int) {
	m.connection = &i
}

// ConnectionID returns the value of the "connection_id" field in the mutation.
func (m *ConnectionMutation) ConnectionID() (r int, exists bool) {
	v := m.connection
	if v == nil {
		return
	}
	return *v, true
}

// OldConnectionID returns the old "connection_id" field's value of the Connection entity.
// If the Connection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectionMutation) OldConnectionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConnectionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConnectionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConnectionID: %w", err)
	}
	return oldValue.ConnectionID, nil
}

// ResetConnectionID resets all changes to the "connection_id" field.
func (m *ConnectionMutation) ResetConnectionID() {
	m.connection = nil
}

// SetIssuerPrimaryKey sets the "issuer_primary_key" field.
func (m *ConnectionMutation) SetIssuerPrimaryKey(s string) {
	m.issuer_primary_key = &s
}

// IssuerPrimaryKey returns the value of the "issuer_primary_key" field in the mutation.
func (m *ConnectionMutation) IssuerPrimaryKey() (r string, exists bool) {
	v := m.issuer_primary_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIssuerPrimaryKey returns the old "issuer_primary_key" field's value of the Connection entity.
// If the Connection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectionMutation) OldIssuerPrimaryKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIssuerPrimaryKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIssuerPrimaryKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIssuerPrimaryKey: %w", err)
	}
	return oldValue.IssuerPrimaryKey, nil
}

// ResetIssuerPrimaryKey resets all changes to the "issuer_primary_key" field.
func (m *ConnectionMutation) ResetIssuerPrimaryKey() {
	m.issuer_primary_key = nil
}

// SetSubjectPrimaryKey sets the "subject_primary_key" field.
func (m *ConnectionMutation) SetSubjectPrimaryKey(s string) {
	m.subject_primary_key = &s
}

// SubjectPrimaryKey returns the value of the "subject_primary_key" field in the mutation.
func (m *ConnectionMutation) SubjectPrimaryKey() (r string, exists bool) {
	v := m.subject_primary_key
	if v == nil {
		return
	}
	return *v, true
}

// OldSubjectPrimaryKey returns the old "subject_primary_key" field's value of the Connection entity.
// If the Connection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectionMutation) OldSubjectPrimaryKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubjectPrimaryKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubjectPrimaryKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubjectPrimaryKey: %w", err)
	}
	return oldValue.SubjectPrimaryKey, nil
}

// ResetSubjectPrimaryKey resets all changes to the "subject_primary_key" field.
func (m *ConnectionMutation) ResetSubjectPrimaryKey() {
	m.subject_primary_key = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ConnectionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ConnectionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ConnectionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ConnectionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearConnection clears the "connection" edge to the User entity.
func (m *ConnectionMutation) ClearConnection() {
	m.clearedconnection = true
}

// ConnectionCleared reports if the "connection" edge to the User entity was cleared.
func (m *ConnectionMutation) ConnectionCleared() bool {
	return m.clearedconnection
}

// ConnectionIDs returns the "connection" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ConnectionID instead. It exists only for internal usage by the builders.
func (m *ConnectionMutation) ConnectionIDs() (ids []int) {
	if id := m.connection; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetConnection resets all changes to the "connection" edge.
func (m *ConnectionMutation) ResetConnection() {
	m.connection = nil
	m.clearedconnection = false
}

// Where appends a list predicates to the ConnectionMutation builder.
func (m *ConnectionMutation) Where(ps ...predicate.Connection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ConnectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Connection).
func (m *ConnectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConnectionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, connection.FieldCreatedAt)
	}
	if m.is_approved != nil {
		fields = append(fields, connection.FieldIsApproved)
	}
	if m.user != nil {
		fields = append(fields, connection.FieldUserID)
	}
	if m.connection != nil {
		fields = append(fields, connection.FieldConnectionID)
	}
	if m.issuer_primary_key != nil {
		fields = append(fields, connection.FieldIssuerPrimaryKey)
	}
	if m.subject_primary_key != nil {
		fields = append(fields, connection.FieldSubjectPrimaryKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConnectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case connection.FieldCreatedAt:
		return m.CreatedAt()
	case connection.FieldIsApproved:
		return m.IsApproved()
	case connection.FieldUserID:
		return m.UserID()
	case connection.FieldConnectionID:
		return m.ConnectionID()
	case connection.FieldIssuerPrimaryKey:
		return m.IssuerPrimaryKey()
	case connection.FieldSubjectPrimaryKey:
		return m.SubjectPrimaryKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConnectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case connection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case connection.FieldIsApproved:
		return m.OldIsApproved(ctx)
	case connection.FieldUserID:
		return m.OldUserID(ctx)
	case connection.FieldConnectionID:
		return m.OldConnectionID(ctx)
	case connection.FieldIssuerPrimaryKey:
		return m.OldIssuerPrimaryKey(ctx)
	case connection.FieldSubjectPrimaryKey:
		return m.OldSubjectPrimaryKey(ctx)
	}
	return nil, fmt.Errorf("unknown Connection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConnectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case connection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case connection.FieldIsApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsApproved(v)
		return nil
	case connection.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case connection.FieldConnectionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConnectionID(v)
		return nil
	case connection.FieldIssuerPrimaryKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIssuerPrimaryKey(v)
		return nil
	case connection.FieldSubjectPrimaryKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubjectPrimaryKey(v)
		return nil
	}
	return fmt.Errorf("unknown Connection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConnectionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConnectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConnectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Connection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConnectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConnectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConnectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Connection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConnectionMutation) ResetField(name string) error {
	switch name {
	case connection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case connection.FieldIsApproved:
		m.ResetIsApproved()
		return nil
	case connection.FieldUserID:
		m.ResetUserID()
		return nil
	case connection.FieldConnectionID:
		m.ResetConnectionID()
		return nil
	case connection.FieldIssuerPrimaryKey:
		m.ResetIssuerPrimaryKey()
		return nil
	case connection.FieldSubjectPrimaryKey:
		m.ResetSubjectPrimaryKey()
		return nil
	}
	return fmt.Errorf("unknown Connection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConnectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, connection.EdgeUser)
	}
	if m.connection != nil {
		edges = append(edges, connection.EdgeConnection)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConnectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case connection.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case connection.EdgeConnection:
		if id := m.connection; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConnectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConnectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConnectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, connection.EdgeUser)
	}
	if m.clearedconnection {
		edges = append(edges, connection.EdgeConnection)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConnectionMutation) EdgeCleared(name string) bool {
	switch name {
	case connection.EdgeUser:
		return m.cleareduser
	case connection.EdgeConnection:
		return m.clearedconnection
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConnectionMutation) ClearEdge(name string) error {
	switch name {
	case connection.EdgeUser:
		m.ClearUser()
		return nil
	case connection.EdgeConnection:
		m.ClearConnection()
		return nil
	}
	return fmt.Errorf("unknown Connection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConnectionMutation) ResetEdge(name string) error {
	switch name {
	case connection.EdgeUser:
		m.ResetUser()
		return nil
	case connection.EdgeConnection:
		m.ResetConnection()
		return nil
	}
	return fmt.Errorf("unknown Connection edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	primary_key        *string
	is_private         *bool
	clearedFields      map[string]struct{}
	connection         map[int]struct{}
	removedconnection  map[int]struct{}
	clearedconnection  bool
	block              map[int]struct{}
	removedblock       map[int]struct{}
	clearedblock       bool
	connections        map[int]struct{}
	removedconnections map[int]struct{}
	clearedconnections bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrimaryKey sets the "primary_key" field.
func (m *UserMutation) SetPrimaryKey(s string) {
	m.primary_key = &s
}

// PrimaryKey returns the value of the "primary_key" field in the mutation.
func (m *UserMutation) PrimaryKey() (r string, exists bool) {
	v := m.primary_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimaryKey returns the old "primary_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPrimaryKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrimaryKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrimaryKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimaryKey: %w", err)
	}
	return oldValue.PrimaryKey, nil
}

// ResetPrimaryKey resets all changes to the "primary_key" field.
func (m *UserMutation) ResetPrimaryKey() {
	m.primary_key = nil
}

// SetIsPrivate sets the "is_private" field.
func (m *UserMutation) SetIsPrivate(b bool) {
	m.is_private = &b
}

// IsPrivate returns the value of the "is_private" field in the mutation.
func (m *UserMutation) IsPrivate() (r bool, exists bool) {
	v := m.is_private
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPrivate returns the old "is_private" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPrivate: %w", err)
	}
	return oldValue.IsPrivate, nil
}

// ResetIsPrivate resets all changes to the "is_private" field.
func (m *UserMutation) ResetIsPrivate() {
	m.is_private = nil
}

// AddConnectionIDs adds the "connection" edge to the User entity by ids.
func (m *UserMutation) AddConnectionIDs(ids ...int) {
	if m.connection == nil {
		m.connection = make(map[int]struct{})
	}
	for i := range ids {
		m.connection[ids[i]] = struct{}{}
	}
}

// ClearConnection clears the "connection" edge to the User entity.
func (m *UserMutation) ClearConnection() {
	m.clearedconnection = true
}

// ConnectionCleared reports if the "connection" edge to the User entity was cleared.
func (m *UserMutation) ConnectionCleared() bool {
	return m.clearedconnection
}

// RemoveConnectionIDs removes the "connection" edge to the User entity by IDs.


// RemovedConnection returns the removed IDs of the "connection" edge to the User entity.
func (m *UserMutation) RemovedConnectionIDs() (ids []int) {
	for id := range m.removedconnection {
		ids = append(ids, id)
	}
	return
}

// ConnectionIDs returns the "connection" edge IDs in the mutation.
func (m *UserMutation) ConnectionIDs() (ids []int) {
	for id := range m.connection {
		ids = append(ids, id)
	}
	return
}

// ResetConnection resets all changes to the "connection" edge.
func (m *UserMutation) ResetConnection() {
	m.connection = nil
	m.clearedconnection = false
	m.removedconnection = nil
}

// AddBlockIDs adds the "block" edge to the BlockedUser entity by ids.
func (m *UserMutation) AddBlockIDs(ids ...int) {
	if m.block == nil {
		m.block = make(map[int]struct{})
	}
	for i := range ids {
		m.block[ids[i]] = struct{}{}
	}
}

// ClearBlock clears the "block" edge to the BlockedUser entity.
func (m *UserMutation) ClearBlock() {
	m.clearedblock = true
}

// BlockCleared reports if the "block" edge to the BlockedUser entity was cleared.
func (m *UserMutation) BlockCleared() bool {
	return m.clearedblock
}

// RemoveBlockIDs removes the "block" edge to the BlockedUser entity by IDs.
func (m *UserMutation) RemoveBlockIDs(ids ...int) {
	if m.removedblock == nil {
		m.removedblock = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.block, ids[i])
		m.removedblock[ids[i]] = struct{}{}
	}
}

// RemovedBlock returns the removed IDs of the "block" edge to the BlockedUser entity.
func (m *UserMutation) RemovedBlockIDs() (ids []int) {
	for id := range m.removedblock {
		ids = append(ids, id)
	}
	return
}

// BlockIDs returns the "block" edge IDs in the mutation.
func (m *UserMutation) BlockIDs() (ids []int) {
	for id := range m.block {
		ids = append(ids, id)
	}
	return
}

// ResetBlock resets all changes to the "block" edge.
func (m *UserMutation) ResetBlock() {
	m.block = nil
	m.clearedblock = false
	m.removedblock = nil
}

// AddConnectionIDs adds the "connections" edge to the Connection entity by ids.


// ClearConnections clears the "connections" edge to the Connection entity.
func (m *UserMutation) ClearConnections() {
	m.clearedconnections = true
}

// ConnectionsCleared reports if the "connections" edge to the Connection entity was cleared.
func (m *UserMutation) ConnectionsCleared() bool {
	return m.clearedconnections
}

// RemoveConnectionIDs removes the "connections" edge to the Connection entity by IDs.
func (m *UserMutation) RemoveConnectionIDs(ids ...int) {
	if m.removedconnections == nil {
		m.removedconnections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.connections, ids[i])
		m.removedconnections[ids[i]] = struct{}{}
	}
}

// RemovedConnections returns the removed IDs of the "connections" edge to the Connection entity.
func (m *UserMutation) RemovedConnectionsIDs() (ids []int) {
	for id := range m.removedconnections {
		ids = append(ids, id)
	}
	return
}

// ConnectionsIDs returns the "connections" edge IDs in the mutation.
func (m *UserMutation) ConnectionsIDs() (ids []int) {
	for id := range m.connections {
		ids = append(ids, id)
	}
	return
}

// ResetConnections resets all changes to the "connections" edge.
func (m *UserMutation) ResetConnections() {
	m.connections = nil
	m.clearedconnections = false
	m.removedconnections = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.primary_key != nil {
		fields = append(fields, user.FieldPrimaryKey)
	}
	if m.is_private != nil {
		fields = append(fields, user.FieldIsPrivate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPrimaryKey:
		return m.PrimaryKey()
	case user.FieldIsPrivate:
		return m.IsPrivate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldPrimaryKey:
		return m.OldPrimaryKey(ctx)
	case user.FieldIsPrivate:
		return m.OldIsPrivate(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldPrimaryKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimaryKey(v)
		return nil
	case user.FieldIsPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPrivate(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldPrimaryKey:
		m.ResetPrimaryKey()
		return nil
	case user.FieldIsPrivate:
		m.ResetIsPrivate()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.connection != nil {
		edges = append(edges, user.EdgeConnection)
	}
	if m.block != nil {
		edges = append(edges, user.EdgeBlock)
	}
	if m.connections != nil {
		edges = append(edges, user.EdgeConnections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeConnection:
		ids := make([]ent.Value, 0, len(m.connection))
		for id := range m.connection {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBlock:
		ids := make([]ent.Value, 0, len(m.block))
		for id := range m.block {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeConnections:
		ids := make([]ent.Value, 0, len(m.connections))
		for id := range m.connections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedconnection != nil {
		edges = append(edges, user.EdgeConnection)
	}
	if m.removedblock != nil {
		edges = append(edges, user.EdgeBlock)
	}
	if m.removedconnections != nil {
		edges = append(edges, user.EdgeConnections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeConnection:
		ids := make([]ent.Value, 0, len(m.removedconnection))
		for id := range m.removedconnection {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBlock:
		ids := make([]ent.Value, 0, len(m.removedblock))
		for id := range m.removedblock {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeConnections:
		ids := make([]ent.Value, 0, len(m.removedconnections))
		for id := range m.removedconnections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedconnection {
		edges = append(edges, user.EdgeConnection)
	}
	if m.clearedblock {
		edges = append(edges, user.EdgeBlock)
	}
	if m.clearedconnections {
		edges = append(edges, user.EdgeConnections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeConnection:
		return m.clearedconnection
	case user.EdgeBlock:
		return m.clearedblock
	case user.EdgeConnections:
		return m.clearedconnections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeConnection:
		m.ResetConnection()
		return nil
	case user.EdgeBlock:
		m.ResetBlock()
		return nil
	case user.EdgeConnections:
		m.ResetConnections()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
