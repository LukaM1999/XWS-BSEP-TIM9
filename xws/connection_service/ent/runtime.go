// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dislinkt/connection_service/ent/blockeduser"
	"dislinkt/connection_service/ent/connection"
	"dislinkt/connection_service/ent/schema"
	"dislinkt/connection_service/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	blockeduserFields := schema.BlockedUser{}.Fields()
	_ = blockeduserFields
	// blockeduserDescCreatedAt is the schema descriptor for created_at field.
	blockeduserDescCreatedAt := blockeduserFields[0].Descriptor()
	// blockeduser.DefaultCreatedAt holds the default value on creation for the created_at field.
	blockeduser.DefaultCreatedAt = blockeduserDescCreatedAt.Default.(func() time.Time)
	connectionFields := schema.Connection{}.Fields()
	_ = connectionFields
	// connectionDescCreatedAt is the schema descriptor for created_at field.
	connectionDescCreatedAt := connectionFields[0].Descriptor()
	// connection.DefaultCreatedAt holds the default value on creation for the created_at field.
	connection.DefaultCreatedAt = connectionDescCreatedAt.Default.(func() time.Time)
	// connectionDescIsApproved is the schema descriptor for is_approved field.
	connectionDescIsApproved := connectionFields[1].Descriptor()
	// connection.DefaultIsApproved holds the default value on creation for the is_approved field.
	connection.DefaultIsApproved = connectionDescIsApproved.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescIsPrivate is the schema descriptor for is_private field.
	userDescIsPrivate := userFields[1].Descriptor()
	// user.DefaultIsPrivate holds the default value on creation for the is_private field.
	user.DefaultIsPrivate = userDescIsPrivate.Default.(bool)
}
