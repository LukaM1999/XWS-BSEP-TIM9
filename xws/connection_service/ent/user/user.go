// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrimaryKey holds the string denoting the primary_key field in the database.
	FieldPrimaryKey = "primary_key"
	// FieldIsPrivate holds the string denoting the is_private field in the database.
	FieldIsPrivate = "is_private"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// EdgeConnections holds the string denoting the connections edge name in mutations.
	EdgeConnections = "connections"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ConnectionTable is the table that holds the connection relation/edge. The primary key declared below.
	ConnectionTable = "connections"
	// BlockTable is the table that holds the block relation/edge.
	BlockTable = "blocked_users"
	// BlockInverseTable is the table name for the BlockedUser entity.
	// It exists in this package in order to avoid circular dependency with the "blockeduser" package.
	BlockInverseTable = "blocked_users"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "user_block"
	// ConnectionsTable is the table that holds the connections relation/edge.
	ConnectionsTable = "connections"
	// ConnectionsInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionsInverseTable = "connections"
	// ConnectionsColumn is the table column denoting the connections relation/edge.
	ConnectionsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPrimaryKey,
	FieldIsPrivate,
}

var (
	// ConnectionPrimaryKey and ConnectionColumn2 are the table columns denoting the
	// primary key for the connection relation (M2M).
	ConnectionPrimaryKey = []string{"user_id", "connection_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsPrivate holds the default value on creation for the "is_private" field.
	DefaultIsPrivate bool
)
