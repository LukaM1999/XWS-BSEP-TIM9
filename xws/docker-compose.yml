version: "3.8"

services:
  security_service:
    image: security_service
    container_name: security_service
    build:
      context: .
      dockerfile: ./security_service/Dockerfile
    restart: on-failure
    ports:
      - 8001:${SECURITY_SERVICE_PORT}
    environment:
      OS_ENV: docker
      SECURITY_DB_HOST: ${SECURITY_DB_HOST}
      SECURITY_DB_PORT: ${SECURITY_DB_PORT}
      SECURITY_SERVICE_PORT: ${SECURITY_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_PROFILE_COMMAND_SUBJECT: ${CREATE_PROFILE_COMMAND_SUBJECT}
      CREATE_PROFILE_REPLY_SUBJECT: ${CREATE_PROFILE_REPLY_SUBJECT}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
    depends_on:
      - security_db
    networks:
      - network

  profile_service:
    image: profile_service
    container_name: profile_service
    build:
      context: .
      dockerfile: ./profile_service/Dockerfile
    restart: on-failure
    ports:
      - 8002:${PROFILE_SERVICE_PORT}
    environment:
      OS_ENV: docker
      PROFILE_DB_HOST: ${PROFILE_DB_HOST}
      PROFILE_DB_PORT: ${PROFILE_DB_PORT}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      SECURITY_SERVICE_HOST: ${SECURITY_SERVICE_HOST}
      SECURITY_SERVICE_PORT: ${SECURITY_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_PROFILE_COMMAND_SUBJECT: ${CREATE_PROFILE_COMMAND_SUBJECT}
      CREATE_PROFILE_REPLY_SUBJECT: ${CREATE_PROFILE_REPLY_SUBJECT}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
      PROMOTE_JOB_COMMAND_SUBJECT: ${PROMOTE_JOB_COMMAND_SUBJECT}
      PROMOTE_JOB_REPLY_SUBJECT: ${PROMOTE_JOB_REPLY_SUBJECT}
    depends_on:
      - profile_db
    networks:
      - network

  comment_service:
    image: comment_service
    container_name: comment_service
    build:
      context: .
      dockerfile: ./comment_service/Dockerfile
    restart: on-failure
    ports:
      - 8003:${COMMENT_SERVICE_PORT}
    environment:
      OS_ENV: docker
      COMMENT_DB_HOST: ${COMMENT_DB_HOST}
      COMMENT_DB_PORT: ${COMMENT_DB_PORT}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
      DELETE_POST_COMMAND_SUBJECT: ${DELETE_POST_COMMAND_SUBJECT}
      DELETE_POST_REPLY_SUBJECT: ${DELETE_POST_REPLY_SUBJECT}
    depends_on:
      - comment_db
    networks:
      - network

  reaction_service:
    image: reaction_service
    container_name: reaction_service
    build:
      context: .
      dockerfile: ./reaction_service/Dockerfile
    restart: on-failure
    ports:
      - 8004:${REACTION_SERVICE_PORT}
    environment:
      OS_ENV: docker
      REACTION_DB_HOST: ${REACTION_DB_HOST}
      REACTION_DB_PORT: ${REACTION_DB_PORT}
      REACTION_SERVICE_PORT: ${REACTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      DELETE_POST_COMMAND_SUBJECT: ${DELETE_POST_COMMAND_SUBJECT}
      DELETE_POST_REPLY_SUBJECT: ${DELETE_POST_REPLY_SUBJECT}
    depends_on:
      - reaction_db
    networks:
      - network

  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./connection_service/Dockerfile
    restart: on-failure
    ports:
      - 8005:${CONNECTION_SERVICE_PORT}
    environment:
      OS_ENV: docker
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_PROFILE_COMMAND_SUBJECT: ${CREATE_PROFILE_COMMAND_SUBJECT}
      CREATE_PROFILE_REPLY_SUBJECT: ${CREATE_PROFILE_REPLY_SUBJECT}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
    depends_on:
      - connection_db
    networks:
      - network

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    ports:
      - 8006:${POST_SERVICE_PORT}
    environment:
      OS_ENV: docker
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      REACTION_SERVICE_HOST: ${REACTION_SERVICE_HOST}
      REACTION_SERVICE_PORT: ${REACTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
      DELETE_POST_COMMAND_SUBJECT: ${DELETE_POST_COMMAND_SUBJECT}
      DELETE_POST_REPLY_SUBJECT: ${DELETE_POST_REPLY_SUBJECT}
    depends_on:
      - post_db
    networks:
      - network

  job_offer_service:
    image: job_offer_service
    container_name: job_offer_service
    build:
      context: .
      dockerfile: ./job_offer_service/Dockerfile
    restart: on-failure
    ports:
      - 8007:${JOB_OFFER_SERVICE_PORT}
    environment:
      OS_ENV: docker
      JOB_OFFER_DB_HOST: ${JOB_OFFER_DB_HOST}
      JOB_OFFER_DB_PORT: ${JOB_OFFER_DB_PORT}
      JOB_OFFER_SERVICE_PORT: ${JOB_OFFER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      PROMOTE_JOB_COMMAND_SUBJECT: ${PROMOTE_JOB_COMMAND_SUBJECT}
      PROMOTE_JOB_REPLY_SUBJECT: ${PROMOTE_JOB_REPLY_SUBJECT}
    depends_on:
      - job_offer_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      OS_ENV: docker
      GATEWAY_PORT: ${GATEWAY_PORT}
      SECURITY_SERVICE_HOST: ${SECURITY_SERVICE_HOST}
      SECURITY_SERVICE_PORT: ${SECURITY_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      REACTION_SERVICE_HOST: ${REACTION_SERVICE_HOST}
      REACTION_SERVICE_PORT: ${REACTION_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      JOB_OFFER_SERVICE_HOST: ${JOB_OFFER_SERVICE_HOST}
      JOB_OFFER_SERVICE_PORT: ${JOB_OFFER_SERVICE_PORT}
    networks:
      - network

  security_db:
    image: mongo
    container_name: security_db
    restart: on-failure
    ports:
      - 27017:${SECURITY_DB_PORT}
    networks:
      - network

  profile_db:
    image: mongo
    container_name: profile_db
    restart: on-failure
#    ports:
#      - 27017:${PROFILE_DB_PORT}
    networks:
      - network

  comment_db:
    image: mongo
    container_name: comment_db
    restart: on-failure
#    ports:
#      - 27017:${COMMENT_DB_PORT}
    networks:
      - network

  reaction_db:
    image: mongo
    container_name: reaction_db
    restart: on-failure
#    ports:
#      - 27017:${REACTION_DB_PORT}
    networks:
      - network

  connection_db:
    image: postgres:14.1-alpine
    container_name: connection_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5433:${CONNECTION_DB_PORT}
    networks:
      - network

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
#    ports:
#      - 27017:${POST_DB_PORT}
    networks:
      - network

  job_offer_db:
    image: postgres:14.1-alpine
    container_name: job_offer_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5434:${JOB_OFFER_DB_PORT}
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge