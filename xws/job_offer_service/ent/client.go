// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"dislinkt/job_offer_service/ent/migrate"

	"dislinkt/job_offer_service/ent/joboffer"
	"dislinkt/job_offer_service/ent/skill"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// JobOffer is the client for interacting with the JobOffer builders.
	JobOffer *JobOfferClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.JobOffer = NewJobOfferClient(c.config)
	c.Skill = NewSkillClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		JobOffer: NewJobOfferClient(cfg),
		Skill:    NewSkillClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		JobOffer: NewJobOfferClient(cfg),
		Skill:    NewSkillClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		JobOffer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.JobOffer.Use(hooks...)
	c.Skill.Use(hooks...)
}

// JobOfferClient is a client for the JobOffer schema.
type JobOfferClient struct {
	config
}

// NewJobOfferClient returns a client for the JobOffer from the given config.
func NewJobOfferClient(c config) *JobOfferClient {
	return &JobOfferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `joboffer.Hooks(f(g(h())))`.
func (c *JobOfferClient) Use(hooks ...Hook) {
	c.hooks.JobOffer = append(c.hooks.JobOffer, hooks...)
}

// Create returns a create builder for JobOffer.
func (c *JobOfferClient) Create() *JobOfferCreate {
	mutation := newJobOfferMutation(c.config, OpCreate)
	return &JobOfferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobOffer entities.
func (c *JobOfferClient) CreateBulk(builders ...*JobOfferCreate) *JobOfferCreateBulk {
	return &JobOfferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobOffer.
func (c *JobOfferClient) Update() *JobOfferUpdate {
	mutation := newJobOfferMutation(c.config, OpUpdate)
	return &JobOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobOfferClient) UpdateOne(jo *JobOffer) *JobOfferUpdateOne {
	mutation := newJobOfferMutation(c.config, OpUpdateOne, withJobOffer(jo))
	return &JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobOfferClient) UpdateOneID(id int) *JobOfferUpdateOne {
	mutation := newJobOfferMutation(c.config, OpUpdateOne, withJobOfferID(id))
	return &JobOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobOffer.
func (c *JobOfferClient) Delete() *JobOfferDelete {
	mutation := newJobOfferMutation(c.config, OpDelete)
	return &JobOfferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobOfferClient) DeleteOne(jo *JobOffer) *JobOfferDeleteOne {
	return c.DeleteOneID(jo.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobOfferClient) DeleteOneID(id int) *JobOfferDeleteOne {
	builder := c.Delete().Where(joboffer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobOfferDeleteOne{builder}
}

// Query returns a query builder for JobOffer.
func (c *JobOfferClient) Query() *JobOfferQuery {
	return &JobOfferQuery{
		config: c.config,
	}
}

// Get returns a JobOffer entity by its id.
func (c *JobOfferClient) Get(ctx context.Context, id int) (*JobOffer, error) {
	return c.Query().Where(joboffer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobOfferClient) GetX(ctx context.Context, id int) *JobOffer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequires queries the requires edge of a JobOffer.
func (c *JobOfferClient) QueryRequires(jo *JobOffer) *SkillQuery {
	query := &SkillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joboffer.Table, joboffer.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, joboffer.RequiresTable, joboffer.RequiresPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(jo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobOfferClient) Hooks() []Hook {
	return c.hooks.JobOffer
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Create returns a create builder for Skill.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequired queries the required edge of a Skill.
func (c *SkillClient) QueryRequired(s *Skill) *JobOfferQuery {
	query := &JobOfferQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(joboffer.Table, joboffer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, skill.RequiredTable, skill.RequiredPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}
