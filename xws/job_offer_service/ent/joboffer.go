// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dislinkt/job_offer_service/ent/joboffer"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// JobOffer is the model entity for the JobOffer schema.
type JobOffer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID string `json:"profile_id,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Criteria holds the value of the "criteria" field.
	Criteria string `json:"criteria,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobOfferQuery when eager-loading is set.
	Edges JobOfferEdges `json:"edges"`
}

// JobOfferEdges holds the relations/edges for other nodes in the graph.
type JobOfferEdges struct {
	// Requires holds the value of the requires edge.
	Requires []*Skill `json:"requires,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequiresOrErr returns the Requires value or an error if the edge
// was not loaded in eager-loading.
func (e JobOfferEdges) RequiresOrErr() ([]*Skill, error) {
	if e.loadedTypes[0] {
		return e.Requires, nil
	}
	return nil, &NotLoadedError{edge: "requires"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobOffer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case joboffer.FieldID:
			values[i] = new(sql.NullInt64)
		case joboffer.FieldProfileID, joboffer.FieldCompany, joboffer.FieldPosition, joboffer.FieldDescription, joboffer.FieldCriteria:
			values[i] = new(sql.NullString)
		case joboffer.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type JobOffer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobOffer fields.
func (jo *JobOffer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case joboffer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jo.ID = int(value.Int64)
		case joboffer.FieldProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				jo.ProfileID = value.String
			}
		case joboffer.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				jo.Company = value.String
			}
		case joboffer.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				jo.Position = value.String
			}
		case joboffer.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jo.Description = value.String
			}
		case joboffer.FieldCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field criteria", values[i])
			} else if value.Valid {
				jo.Criteria = value.String
			}
		case joboffer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jo.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryRequires queries the "requires" edge of the JobOffer entity.
func (jo *JobOffer) QueryRequires() *SkillQuery {
	return (&JobOfferClient{config: jo.config}).QueryRequires(jo)
}

// Update returns a builder for updating this JobOffer.
// Note that you need to call JobOffer.Unwrap() before calling this method if this JobOffer
// was returned from a transaction, and the transaction was committed or rolled back.
func (jo *JobOffer) Update() *JobOfferUpdateOne {
	return (&JobOfferClient{config: jo.config}).UpdateOne(jo)
}

// Unwrap unwraps the JobOffer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jo *JobOffer) Unwrap() *JobOffer {
	tx, ok := jo.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobOffer is not a transactional entity")
	}
	jo.config.driver = tx.drv
	return jo
}

// String implements the fmt.Stringer.
func (jo *JobOffer) String() string {
	var builder strings.Builder
	builder.WriteString("JobOffer(")
	builder.WriteString(fmt.Sprintf("id=%v", jo.ID))
	builder.WriteString(", profile_id=")
	builder.WriteString(jo.ProfileID)
	builder.WriteString(", company=")
	builder.WriteString(jo.Company)
	builder.WriteString(", position=")
	builder.WriteString(jo.Position)
	builder.WriteString(", description=")
	builder.WriteString(jo.Description)
	builder.WriteString(", criteria=")
	builder.WriteString(jo.Criteria)
	builder.WriteString(", created_at=")
	builder.WriteString(jo.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobOffers is a parsable slice of JobOffer.
type JobOffers []*JobOffer

func (jo JobOffers) config(cfg config) {
	for _i := range jo {
		jo[_i].config = cfg
	}
}
