// Code generated by entc, DO NOT EDIT.

package joboffer

import (
	"dislinkt/job_offer_service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileID), v))
	})
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPosition), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Criteria applies equality check predicate on the "criteria" field. It's identical to CriteriaEQ.
func Criteria(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCriteria), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileID), v))
	})
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileID), v))
	})
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProfileID), v...))
	})
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProfileID), v...))
	})
}

// ProfileIDGT applies the GT predicate on the "profile_id" field.
func ProfileIDGT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfileID), v))
	})
}

// ProfileIDGTE applies the GTE predicate on the "profile_id" field.
func ProfileIDGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfileID), v))
	})
}

// ProfileIDLT applies the LT predicate on the "profile_id" field.
func ProfileIDLT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfileID), v))
	})
}

// ProfileIDLTE applies the LTE predicate on the "profile_id" field.
func ProfileIDLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfileID), v))
	})
}

// ProfileIDContains applies the Contains predicate on the "profile_id" field.
func ProfileIDContains(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfileID), v))
	})
}

// ProfileIDHasPrefix applies the HasPrefix predicate on the "profile_id" field.
func ProfileIDHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfileID), v))
	})
}

// ProfileIDHasSuffix applies the HasSuffix predicate on the "profile_id" field.
func ProfileIDHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfileID), v))
	})
}

// ProfileIDEqualFold applies the EqualFold predicate on the "profile_id" field.
func ProfileIDEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfileID), v))
	})
}

// ProfileIDContainsFold applies the ContainsFold predicate on the "profile_id" field.
func ProfileIDContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfileID), v))
	})
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompany), v))
	})
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompany), v...))
	})
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompany), v...))
	})
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompany), v))
	})
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompany), v))
	})
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompany), v))
	})
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompany), v))
	})
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompany), v))
	})
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompany), v))
	})
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompany), v))
	})
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompany), v))
	})
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompany), v))
	})
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPosition), v))
	})
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPosition), v))
	})
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPosition), v...))
	})
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPosition), v...))
	})
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPosition), v))
	})
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPosition), v))
	})
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPosition), v))
	})
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPosition), v))
	})
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPosition), v))
	})
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPosition), v))
	})
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPosition), v))
	})
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPosition), v))
	})
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPosition), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// CriteriaEQ applies the EQ predicate on the "criteria" field.
func CriteriaEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCriteria), v))
	})
}

// CriteriaNEQ applies the NEQ predicate on the "criteria" field.
func CriteriaNEQ(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCriteria), v))
	})
}

// CriteriaIn applies the In predicate on the "criteria" field.
func CriteriaIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCriteria), v...))
	})
}

// CriteriaNotIn applies the NotIn predicate on the "criteria" field.
func CriteriaNotIn(vs ...string) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCriteria), v...))
	})
}

// CriteriaGT applies the GT predicate on the "criteria" field.
func CriteriaGT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCriteria), v))
	})
}

// CriteriaGTE applies the GTE predicate on the "criteria" field.
func CriteriaGTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCriteria), v))
	})
}

// CriteriaLT applies the LT predicate on the "criteria" field.
func CriteriaLT(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCriteria), v))
	})
}

// CriteriaLTE applies the LTE predicate on the "criteria" field.
func CriteriaLTE(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCriteria), v))
	})
}

// CriteriaContains applies the Contains predicate on the "criteria" field.
func CriteriaContains(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCriteria), v))
	})
}

// CriteriaHasPrefix applies the HasPrefix predicate on the "criteria" field.
func CriteriaHasPrefix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCriteria), v))
	})
}

// CriteriaHasSuffix applies the HasSuffix predicate on the "criteria" field.
func CriteriaHasSuffix(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCriteria), v))
	})
}

// CriteriaEqualFold applies the EqualFold predicate on the "criteria" field.
func CriteriaEqualFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCriteria), v))
	})
}

// CriteriaContainsFold applies the ContainsFold predicate on the "criteria" field.
func CriteriaContainsFold(v string) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCriteria), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobOffer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobOffer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasRequires applies the HasEdge predicate on the "requires" edge.
func HasRequires() predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequiresTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequiresTable, RequiresPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequiresWith applies the HasEdge predicate on the "requires" edge with a given conditions (other predicates).
func HasRequiresWith(preds ...predicate.Skill) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequiresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequiresTable, RequiresPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobOffer) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobOffer) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobOffer) predicate.JobOffer {
	return predicate.JobOffer(func(s *sql.Selector) {
		p(s.Not())
	})
}
