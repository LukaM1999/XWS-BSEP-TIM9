// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dislinkt/job_offer_service/ent/joboffer"
	"dislinkt/job_offer_service/ent/predicate"
	"dislinkt/job_offer_service/ent/skill"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobOfferUpdate is the builder for updating JobOffer entities.
type JobOfferUpdate struct {
	config
	hooks    []Hook
	mutation *JobOfferMutation
}

// Where appends a list predicates to the JobOfferUpdate builder.
func (jou *JobOfferUpdate) Where(ps ...predicate.JobOffer) *JobOfferUpdate {
	jou.mutation.Where(ps...)
	return jou
}

// SetProfileID sets the "profile_id" field.
func (jou *JobOfferUpdate) SetProfileID(s string) *JobOfferUpdate {
	jou.mutation.SetProfileID(s)
	return jou
}

// SetCompany sets the "company" field.
func (jou *JobOfferUpdate) SetCompany(s string) *JobOfferUpdate {
	jou.mutation.SetCompany(s)
	return jou
}

// SetPosition sets the "position" field.
func (jou *JobOfferUpdate) SetPosition(s string) *JobOfferUpdate {
	jou.mutation.SetPosition(s)
	return jou
}

// SetDescription sets the "description" field.
func (jou *JobOfferUpdate) SetDescription(s string) *JobOfferUpdate {
	jou.mutation.SetDescription(s)
	return jou
}

// SetCriteria sets the "criteria" field.
func (jou *JobOfferUpdate) SetCriteria(s string) *JobOfferUpdate {
	jou.mutation.SetCriteria(s)
	return jou
}

// SetCreatedAt sets the "created_at" field.
func (jou *JobOfferUpdate) SetCreatedAt(t time.Time) *JobOfferUpdate {
	jou.mutation.SetCreatedAt(t)
	return jou
}

// AddRequireIDs adds the "requires" edge to the Skill entity by IDs.
func (jou *JobOfferUpdate) AddRequireIDs(ids ...int) *JobOfferUpdate {
	jou.mutation.AddRequireIDs(ids...)
	return jou
}

// AddRequires adds the "requires" edges to the Skill entity.
func (jou *JobOfferUpdate) AddRequires(s ...*Skill) *JobOfferUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jou.AddRequireIDs(ids...)
}

// Mutation returns the JobOfferMutation object of the builder.
func (jou *JobOfferUpdate) Mutation() *JobOfferMutation {
	return jou.mutation
}

// ClearRequires clears all "requires" edges to the Skill entity.
func (jou *JobOfferUpdate) ClearRequires() *JobOfferUpdate {
	jou.mutation.ClearRequires()
	return jou
}

// RemoveRequireIDs removes the "requires" edge to Skill entities by IDs.
func (jou *JobOfferUpdate) RemoveRequireIDs(ids ...int) *JobOfferUpdate {
	jou.mutation.RemoveRequireIDs(ids...)
	return jou
}

// RemoveRequires removes "requires" edges to Skill entities.
func (jou *JobOfferUpdate) RemoveRequires(s ...*Skill) *JobOfferUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jou.RemoveRequireIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jou *JobOfferUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(jou.hooks) == 0 {
		affected, err = jou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobOfferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jou.mutation = mutation
			affected, err = jou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(jou.hooks) - 1; i >= 0; i-- {
			if jou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (jou *JobOfferUpdate) SaveX(ctx context.Context) int {
	affected, err := jou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jou *JobOfferUpdate) Exec(ctx context.Context) error {
	_, err := jou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jou *JobOfferUpdate) ExecX(ctx context.Context) {
	if err := jou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jou *JobOfferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   joboffer.Table,
			Columns: joboffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: joboffer.FieldID,
			},
		},
	}
	if ps := jou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jou.mutation.ProfileID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldProfileID,
		})
	}
	if value, ok := jou.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldCompany,
		})
	}
	if value, ok := jou.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldPosition,
		})
	}
	if value, ok := jou.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldDescription,
		})
	}
	if value, ok := jou.mutation.Criteria(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldCriteria,
		})
	}
	if value, ok := jou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: joboffer.FieldCreatedAt,
		})
	}
	if jou.mutation.RequiresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   joboffer.RequiresTable,
			Columns: joboffer.RequiresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jou.mutation.RemovedRequiresIDs(); len(nodes) > 0 && !jou.mutation.RequiresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   joboffer.RequiresTable,
			Columns: joboffer.RequiresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jou.mutation.RequiresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   joboffer.RequiresTable,
			Columns: joboffer.RequiresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joboffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// JobOfferUpdateOne is the builder for updating a single JobOffer entity.
type JobOfferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobOfferMutation
}

// SetProfileID sets the "profile_id" field.
func (jouo *JobOfferUpdateOne) SetProfileID(s string) *JobOfferUpdateOne {
	jouo.mutation.SetProfileID(s)
	return jouo
}

// SetCompany sets the "company" field.
func (jouo *JobOfferUpdateOne) SetCompany(s string) *JobOfferUpdateOne {
	jouo.mutation.SetCompany(s)
	return jouo
}

// SetPosition sets the "position" field.
func (jouo *JobOfferUpdateOne) SetPosition(s string) *JobOfferUpdateOne {
	jouo.mutation.SetPosition(s)
	return jouo
}

// SetDescription sets the "description" field.
func (jouo *JobOfferUpdateOne) SetDescription(s string) *JobOfferUpdateOne {
	jouo.mutation.SetDescription(s)
	return jouo
}

// SetCriteria sets the "criteria" field.
func (jouo *JobOfferUpdateOne) SetCriteria(s string) *JobOfferUpdateOne {
	jouo.mutation.SetCriteria(s)
	return jouo
}

// SetCreatedAt sets the "created_at" field.
func (jouo *JobOfferUpdateOne) SetCreatedAt(t time.Time) *JobOfferUpdateOne {
	jouo.mutation.SetCreatedAt(t)
	return jouo
}

// AddRequireIDs adds the "requires" edge to the Skill entity by IDs.
func (jouo *JobOfferUpdateOne) AddRequireIDs(ids ...int) *JobOfferUpdateOne {
	jouo.mutation.AddRequireIDs(ids...)
	return jouo
}

// AddRequires adds the "requires" edges to the Skill entity.
func (jouo *JobOfferUpdateOne) AddRequires(s ...*Skill) *JobOfferUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jouo.AddRequireIDs(ids...)
}

// Mutation returns the JobOfferMutation object of the builder.
func (jouo *JobOfferUpdateOne) Mutation() *JobOfferMutation {
	return jouo.mutation
}

// ClearRequires clears all "requires" edges to the Skill entity.
func (jouo *JobOfferUpdateOne) ClearRequires() *JobOfferUpdateOne {
	jouo.mutation.ClearRequires()
	return jouo
}

// RemoveRequireIDs removes the "requires" edge to Skill entities by IDs.
func (jouo *JobOfferUpdateOne) RemoveRequireIDs(ids ...int) *JobOfferUpdateOne {
	jouo.mutation.RemoveRequireIDs(ids...)
	return jouo
}

// RemoveRequires removes "requires" edges to Skill entities.
func (jouo *JobOfferUpdateOne) RemoveRequires(s ...*Skill) *JobOfferUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jouo.RemoveRequireIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jouo *JobOfferUpdateOne) Select(field string, fields ...string) *JobOfferUpdateOne {
	jouo.fields = append([]string{field}, fields...)
	return jouo
}

// Save executes the query and returns the updated JobOffer entity.
func (jouo *JobOfferUpdateOne) Save(ctx context.Context) (*JobOffer, error) {
	var (
		err  error
		node *JobOffer
	)
	if len(jouo.hooks) == 0 {
		node, err = jouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobOfferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jouo.mutation = mutation
			node, err = jouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jouo.hooks) - 1; i >= 0; i-- {
			if jouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (jouo *JobOfferUpdateOne) SaveX(ctx context.Context) *JobOffer {
	node, err := jouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jouo *JobOfferUpdateOne) Exec(ctx context.Context) error {
	_, err := jouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jouo *JobOfferUpdateOne) ExecX(ctx context.Context) {
	if err := jouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jouo *JobOfferUpdateOne) sqlSave(ctx context.Context) (_node *JobOffer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   joboffer.Table,
			Columns: joboffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: joboffer.FieldID,
			},
		},
	}
	id, ok := jouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobOffer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, joboffer.FieldID)
		for _, f := range fields {
			if !joboffer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != joboffer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jouo.mutation.ProfileID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldProfileID,
		})
	}
	if value, ok := jouo.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldCompany,
		})
	}
	if value, ok := jouo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldPosition,
		})
	}
	if value, ok := jouo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldDescription,
		})
	}
	if value, ok := jouo.mutation.Criteria(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: joboffer.FieldCriteria,
		})
	}
	if value, ok := jouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: joboffer.FieldCreatedAt,
		})
	}
	if jouo.mutation.RequiresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   joboffer.RequiresTable,
			Columns: joboffer.RequiresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jouo.mutation.RemovedRequiresIDs(); len(nodes) > 0 && !jouo.mutation.RequiresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   joboffer.RequiresTable,
			Columns: joboffer.RequiresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jouo.mutation.RequiresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   joboffer.RequiresTable,
			Columns: joboffer.RequiresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobOffer{config: jouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joboffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
