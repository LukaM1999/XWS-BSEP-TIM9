// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dislinkt/job_offer_service/ent/joboffer"
	"dislinkt/job_offer_service/ent/predicate"
	"dislinkt/job_offer_service/ent/skill"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeJobOffer = "JobOffer"
	TypeSkill    = "Skill"
)

// JobOfferMutation represents an operation that mutates the JobOffer nodes in the graph.
type JobOfferMutation struct {
	config
	op              Op
	typ             string
	id              *int
	profile_id      *string
	company         *string
	position        *string
	description     *string
	criteria        *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	requires        map[int]struct{}
	removedrequires map[int]struct{}
	clearedrequires bool
	done            bool
	oldValue        func(context.Context) (*JobOffer, error)
	predicates      []predicate.JobOffer
}

var _ ent.Mutation = (*JobOfferMutation)(nil)

// jobofferOption allows management of the mutation configuration using functional options.
type jobofferOption func(*JobOfferMutation)

// newJobOfferMutation creates new mutation for the JobOffer entity.
func newJobOfferMutation(c config, op Op, opts ...jobofferOption) *JobOfferMutation {
	m := &JobOfferMutation{
		config:        c,
		op:            op,
		typ:           TypeJobOffer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobOfferID sets the ID field of the mutation.
func withJobOfferID(id int) jobofferOption {
	return func(m *JobOfferMutation) {
		var (
			err   error
			once  sync.Once
			value *JobOffer
		)
		m.oldValue = func(ctx context.Context) (*JobOffer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().JobOffer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJobOffer sets the old JobOffer of the mutation.
func withJobOffer(node *JobOffer) jobofferOption {
	return func(m *JobOfferMutation) {
		m.oldValue = func(context.Context) (*JobOffer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobOfferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobOfferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JobOfferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JobOfferMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().JobOffer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProfileID sets the "profile_id" field.
func (m *JobOfferMutation) SetProfileID(s string) {
	m.profile_id = &s
}

// ProfileID returns the value of the "profile_id" field in the mutation.
func (m *JobOfferMutation) ProfileID() (r string, exists bool) {
	v := m.profile_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileID returns the old "profile_id" field's value of the JobOffer entity.
// If the JobOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobOfferMutation) OldProfileID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileID: %w", err)
	}
	return oldValue.ProfileID, nil
}

// ResetProfileID resets all changes to the "profile_id" field.
func (m *JobOfferMutation) ResetProfileID() {
	m.profile_id = nil
}

// SetCompany sets the "company" field.
func (m *JobOfferMutation) SetCompany(s string) {
	m.company = &s
}

// Company returns the value of the "company" field in the mutation.
func (m *JobOfferMutation) Company() (r string, exists bool) {
	v := m.company
	if v == nil {
		return
	}
	return *v, true
}

// OldCompany returns the old "company" field's value of the JobOffer entity.
// If the JobOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobOfferMutation) OldCompany(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompany is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompany requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompany: %w", err)
	}
	return oldValue.Company, nil
}

// ResetCompany resets all changes to the "company" field.
func (m *JobOfferMutation) ResetCompany() {
	m.company = nil
}

// SetPosition sets the "position" field.
func (m *JobOfferMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *JobOfferMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the JobOffer entity.
// If the JobOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobOfferMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *JobOfferMutation) ResetPosition() {
	m.position = nil
}

// SetDescription sets the "description" field.
func (m *JobOfferMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *JobOfferMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the JobOffer entity.
// If the JobOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobOfferMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *JobOfferMutation) ResetDescription() {
	m.description = nil
}

// SetCriteria sets the "criteria" field.
func (m *JobOfferMutation) SetCriteria(s string) {
	m.criteria = &s
}

// Criteria returns the value of the "criteria" field in the mutation.
func (m *JobOfferMutation) Criteria() (r string, exists bool) {
	v := m.criteria
	if v == nil {
		return
	}
	return *v, true
}

// OldCriteria returns the old "criteria" field's value of the JobOffer entity.
// If the JobOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobOfferMutation) OldCriteria(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCriteria is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCriteria requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCriteria: %w", err)
	}
	return oldValue.Criteria, nil
}

// ResetCriteria resets all changes to the "criteria" field.
func (m *JobOfferMutation) ResetCriteria() {
	m.criteria = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *JobOfferMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *JobOfferMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the JobOffer entity.
// If the JobOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobOfferMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *JobOfferMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddRequireIDs adds the "requires" edge to the Skill entity by ids.
func (m *JobOfferMutation) AddRequireIDs(ids ...int) {
	if m.requires == nil {
		m.requires = make(map[int]struct{})
	}
	for i := range ids {
		m.requires[ids[i]] = struct{}{}
	}
}

// ClearRequires clears the "requires" edge to the Skill entity.
func (m *JobOfferMutation) ClearRequires() {
	m.clearedrequires = true
}

// RequiresCleared reports if the "requires" edge to the Skill entity was cleared.
func (m *JobOfferMutation) RequiresCleared() bool {
	return m.clearedrequires
}

// RemoveRequireIDs removes the "requires" edge to the Skill entity by IDs.
func (m *JobOfferMutation) RemoveRequireIDs(ids ...int) {
	if m.removedrequires == nil {
		m.removedrequires = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.requires, ids[i])
		m.removedrequires[ids[i]] = struct{}{}
	}
}

// RemovedRequires returns the removed IDs of the "requires" edge to the Skill entity.
func (m *JobOfferMutation) RemovedRequiresIDs() (ids []int) {
	for id := range m.removedrequires {
		ids = append(ids, id)
	}
	return
}

// RequiresIDs returns the "requires" edge IDs in the mutation.
func (m *JobOfferMutation) RequiresIDs() (ids []int) {
	for id := range m.requires {
		ids = append(ids, id)
	}
	return
}

// ResetRequires resets all changes to the "requires" edge.
func (m *JobOfferMutation) ResetRequires() {
	m.requires = nil
	m.clearedrequires = false
	m.removedrequires = nil
}

// Where appends a list predicates to the JobOfferMutation builder.
func (m *JobOfferMutation) Where(ps ...predicate.JobOffer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *JobOfferMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (JobOffer).
func (m *JobOfferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JobOfferMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.profile_id != nil {
		fields = append(fields, joboffer.FieldProfileID)
	}
	if m.company != nil {
		fields = append(fields, joboffer.FieldCompany)
	}
	if m.position != nil {
		fields = append(fields, joboffer.FieldPosition)
	}
	if m.description != nil {
		fields = append(fields, joboffer.FieldDescription)
	}
	if m.criteria != nil {
		fields = append(fields, joboffer.FieldCriteria)
	}
	if m.created_at != nil {
		fields = append(fields, joboffer.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JobOfferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case joboffer.FieldProfileID:
		return m.ProfileID()
	case joboffer.FieldCompany:
		return m.Company()
	case joboffer.FieldPosition:
		return m.Position()
	case joboffer.FieldDescription:
		return m.Description()
	case joboffer.FieldCriteria:
		return m.Criteria()
	case joboffer.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JobOfferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case joboffer.FieldProfileID:
		return m.OldProfileID(ctx)
	case joboffer.FieldCompany:
		return m.OldCompany(ctx)
	case joboffer.FieldPosition:
		return m.OldPosition(ctx)
	case joboffer.FieldDescription:
		return m.OldDescription(ctx)
	case joboffer.FieldCriteria:
		return m.OldCriteria(ctx)
	case joboffer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown JobOffer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobOfferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case joboffer.FieldProfileID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileID(v)
		return nil
	case joboffer.FieldCompany:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompany(v)
		return nil
	case joboffer.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case joboffer.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case joboffer.FieldCriteria:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCriteria(v)
		return nil
	case joboffer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown JobOffer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JobOfferMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JobOfferMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobOfferMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown JobOffer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JobOfferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JobOfferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobOfferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown JobOffer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JobOfferMutation) ResetField(name string) error {
	switch name {
	case joboffer.FieldProfileID:
		m.ResetProfileID()
		return nil
	case joboffer.FieldCompany:
		m.ResetCompany()
		return nil
	case joboffer.FieldPosition:
		m.ResetPosition()
		return nil
	case joboffer.FieldDescription:
		m.ResetDescription()
		return nil
	case joboffer.FieldCriteria:
		m.ResetCriteria()
		return nil
	case joboffer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown JobOffer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JobOfferMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.requires != nil {
		edges = append(edges, joboffer.EdgeRequires)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JobOfferMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case joboffer.EdgeRequires:
		ids := make([]ent.Value, 0, len(m.requires))
		for id := range m.requires {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JobOfferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrequires != nil {
		edges = append(edges, joboffer.EdgeRequires)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JobOfferMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case joboffer.EdgeRequires:
		ids := make([]ent.Value, 0, len(m.removedrequires))
		for id := range m.removedrequires {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JobOfferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrequires {
		edges = append(edges, joboffer.EdgeRequires)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JobOfferMutation) EdgeCleared(name string) bool {
	switch name {
	case joboffer.EdgeRequires:
		return m.clearedrequires
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JobOfferMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown JobOffer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JobOfferMutation) ResetEdge(name string) error {
	switch name {
	case joboffer.EdgeRequires:
		m.ResetRequires()
		return nil
	}
	return fmt.Errorf("unknown JobOffer edge %s", name)
}

// SkillMutation represents an operation that mutates the Skill nodes in the graph.
type SkillMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	required        map[int]struct{}
	removedrequired map[int]struct{}
	clearedrequired bool
	done            bool
	oldValue        func(context.Context) (*Skill, error)
	predicates      []predicate.Skill
}

var _ ent.Mutation = (*SkillMutation)(nil)

// skillOption allows management of the mutation configuration using functional options.
type skillOption func(*SkillMutation)

// newSkillMutation creates new mutation for the Skill entity.
func newSkillMutation(c config, op Op, opts ...skillOption) *SkillMutation {
	m := &SkillMutation{
		config:        c,
		op:            op,
		typ:           TypeSkill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkillID sets the ID field of the mutation.
func withSkillID(id int) skillOption {
	return func(m *SkillMutation) {
		var (
			err   error
			once  sync.Once
			value *Skill
		)
		m.oldValue = func(ctx context.Context) (*Skill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Skill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkill sets the old Skill of the mutation.
func withSkill(node *Skill) skillOption {
	return func(m *SkillMutation) {
		m.oldValue = func(context.Context) (*Skill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Skill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SkillMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SkillMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SkillMutation) ResetName() {
	m.name = nil
}

// AddRequiredIDs adds the "required" edge to the JobOffer entity by ids.
func (m *SkillMutation) AddRequiredIDs(ids ...int) {
	if m.required == nil {
		m.required = make(map[int]struct{})
	}
	for i := range ids {
		m.required[ids[i]] = struct{}{}
	}
}

// ClearRequired clears the "required" edge to the JobOffer entity.
func (m *SkillMutation) ClearRequired() {
	m.clearedrequired = true
}

// RequiredCleared reports if the "required" edge to the JobOffer entity was cleared.
func (m *SkillMutation) RequiredCleared() bool {
	return m.clearedrequired
}

// RemoveRequiredIDs removes the "required" edge to the JobOffer entity by IDs.
func (m *SkillMutation) RemoveRequiredIDs(ids ...int) {
	if m.removedrequired == nil {
		m.removedrequired = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.required, ids[i])
		m.removedrequired[ids[i]] = struct{}{}
	}
}

// RemovedRequired returns the removed IDs of the "required" edge to the JobOffer entity.
func (m *SkillMutation) RemovedRequiredIDs() (ids []int) {
	for id := range m.removedrequired {
		ids = append(ids, id)
	}
	return
}

// RequiredIDs returns the "required" edge IDs in the mutation.
func (m *SkillMutation) RequiredIDs() (ids []int) {
	for id := range m.required {
		ids = append(ids, id)
	}
	return
}

// ResetRequired resets all changes to the "required" edge.
func (m *SkillMutation) ResetRequired() {
	m.required = nil
	m.clearedrequired = false
	m.removedrequired = nil
}

// Where appends a list predicates to the SkillMutation builder.
func (m *SkillMutation) Where(ps ...predicate.Skill) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SkillMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Skill).
func (m *SkillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkillMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, skill.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skill.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Skill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skill.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkillMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkillMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Skill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkillMutation) ResetField(name string) error {
	switch name {
	case skill.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkillMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.required != nil {
		edges = append(edges, skill.EdgeRequired)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeRequired:
		ids := make([]ent.Value, 0, len(m.required))
		for id := range m.required {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrequired != nil {
		edges = append(edges, skill.EdgeRequired)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkillMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeRequired:
		ids := make([]ent.Value, 0, len(m.removedrequired))
		for id := range m.removedrequired {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrequired {
		edges = append(edges, skill.EdgeRequired)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkillMutation) EdgeCleared(name string) bool {
	switch name {
	case skill.EdgeRequired:
		return m.clearedrequired
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkillMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkillMutation) ResetEdge(name string) error {
	switch name {
	case skill.EdgeRequired:
		m.ResetRequired()
		return nil
	}
	return fmt.Errorf("unknown Skill edge %s", name)
}
